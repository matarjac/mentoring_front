{"ast":null,"code":"var _jsxFileName = \"/Users/matar.jacob/Desktop/FullStack Moveo Course/Moveo home assignment/front/src/pages/codeBlockPage/CodeBlockPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { CodeTextArea, CodeBlockContainer, CodeTag } from \"../../styledComponents/codeBlockPageStyledComponents\";\n// import 'highlight.js/styles/default.css';\nimport \"highlight.js/styles/github.css\";\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const CodeBlockPage = () => {\n  _s();\n  const {\n    id = ''\n  } = useParams();\n  const codeBlocksData = useSelector(state => state.codeBlocks.value);\n  const currentCodeBlock = codeBlocksData.filter(codeBlock => codeBlock._id === id);\n  const [codeBlockCode, setCodeBlockCode] = useState(currentCodeBlock[0].code);\n  const [codeBlockArr, setCodeBlockArr] = useState([codeBlockCode]);\n  const [codeBlockName, setCodeBlockName] = useState(currentCodeBlock[0].name);\n  const [isMentor, setIsMentor] = useState(false);\n  useEffect(() => {\n    const socket = io('http://localhost:8000');\n    socket.on('connect', () => {\n      console.log('Connected to server');\n    });\n    socket.on('disconnect', () => {\n      console.log('Disconnected from server');\n    });\n    socket.on('chat message', msg => {\n      console.log('Message received:', msg);\n    });\n    socket.on('error', error => {\n      console.error('Error connecting to server:', error);\n    });\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n  const sendMessage = () => {\n    console.log('sending message...');\n    const socket = io('http://localhost:8000');\n    socket.emit('chat message', 'Hello from the client!');\n  };\n  const handleTextChange = e => {\n    console.log(e);\n    const newText = e.target.value;\n    const newString = newText.split(\"\\n\");\n    setCodeBlockArr(newString);\n    setCodeBlockCode(e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CodeBlockContainer, {\n      children: [/*#__PURE__*/_jsxDEV(CodeTag, {\n        children: codeBlockCode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CodeTextArea, {\n        value: codeBlockCode,\n        readOnly: isMentor,\n        onChange: e => handleTextChange(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        sendMessage();\n      },\n      children: \"send Message to server\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(CodeBlockPage, \"kKVOSJHVzXLxJSTtPgyLOCNj7AI=\", false, function () {\n  return [useParams, useSelector];\n});\n_c = CodeBlockPage;\nexport default CodeBlockPage;\n// const codeRef = useRef<HTMLDivElement>(null);\n// hljs.registerLanguage('javascript', javascript);\n// useEffect(() => {\n\n// if (codeRef.current) {\n//     hljs.highlightElement(codeRef.current);\n//     hljs.highlightElement(codeRef.current);\n// }\n// }, [codeBlockCode]);\nvar _c;\n$RefreshReg$(_c, \"CodeBlockPage\");","map":{"version":3,"names":["React","useState","useEffect","useSelector","useParams","CodeTextArea","CodeBlockContainer","CodeTag","io","jsxDEV","_jsxDEV","Fragment","_Fragment","CodeBlockPage","_s","id","codeBlocksData","state","codeBlocks","value","currentCodeBlock","filter","codeBlock","_id","codeBlockCode","setCodeBlockCode","code","codeBlockArr","setCodeBlockArr","codeBlockName","setCodeBlockName","name","isMentor","setIsMentor","socket","on","console","log","msg","error","disconnect","sendMessage","emit","handleTextChange","e","newText","target","newString","split","children","fileName","_jsxFileName","lineNumber","columnNumber","readOnly","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/matar.jacob/Desktop/FullStack Moveo Course/Moveo home assignment/front/src/pages/codeBlockPage/CodeBlockPage.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { IStore } from \"../../interfaces/IStore\";\nimport { CodeTextArea, CodeBlockContainer, CodeTag } from \"../../styledComponents/codeBlockPageStyledComponents\";\nimport hljs from 'highlight.js/lib/core';\nimport javascript from 'highlight.js/lib/languages/javascript';\n// import 'highlight.js/styles/default.css';\nimport \"highlight.js/styles/github.css\";\nimport io from 'socket.io-client';\n\nexport const CodeBlockPage: React.FC = () => {\n\n    const { id = '' } = useParams();\n    const codeBlocksData = useSelector((state: IStore) => state.codeBlocks.value);\n    const currentCodeBlock = codeBlocksData.filter((codeBlock) => codeBlock._id === id);\n    const [codeBlockCode, setCodeBlockCode] = useState(currentCodeBlock[0].code);\n    const [codeBlockArr, setCodeBlockArr] = useState([codeBlockCode]);\n    const [codeBlockName, setCodeBlockName] = useState(currentCodeBlock[0].name);\n    const [isMentor, setIsMentor] = useState(false);\n\n    \n    useEffect(() => {\n        const socket = io('http://localhost:8000');\n        \n        socket.on('connect', () => {\n            console.log('Connected to server');\n        });\n        \n        socket.on('disconnect', () => {\n            console.log('Disconnected from server');\n        });\n        \n        socket.on('chat message', (msg) => {\n            console.log('Message received:', msg);\n        });\n        \n        socket.on('error', (error) => {\n            console.error('Error connecting to server:', error);\n        });\n        \n        \n        \n        return () => {\n            socket.disconnect();\n        };\n    }, []);\n    \n    const sendMessage = () => {\n        console.log('sending message...');\n        const socket = io('http://localhost:8000');\n        socket.emit('chat message', 'Hello from the client!');\n    };\n    \n    const handleTextChange = (e: any) => {\n        console.log(e);\n        const newText = e.target.value;\n        const newString = newText.split(\"\\n\");\n        setCodeBlockArr(newString);\n        setCodeBlockCode(e.target.value);\n    }\n    \n    return (\n        <>\n            <CodeBlockContainer>\n                <CodeTag>{codeBlockCode}</CodeTag>\n                <CodeTextArea value={codeBlockCode} readOnly={isMentor} onChange={(e) => handleTextChange(e)} />\n            </CodeBlockContainer>\n            <button onClick={() => { sendMessage() }}>send Message to server</button>\n        </>\n    )\n}\n\nexport default CodeBlockPage;\n// const codeRef = useRef<HTMLDivElement>(null);\n// hljs.registerLanguage('javascript', javascript);\n// useEffect(() => {\n\n// if (codeRef.current) {\n//     hljs.highlightElement(codeRef.current);\n//     hljs.highlightElement(codeRef.current);\n// }\n// }, [codeBlockCode]);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}